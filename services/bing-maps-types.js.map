{"version":3,"sources":["services/bing-maps-types.ts"],"names":[],"mappings":"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","file":"services/bing-maps-types.js","sourcesContent":["export interface LatLng {\r\n  constructor(lat: number, lng: number): void;\r\n  lat(): number;\r\n  lng(): number;\r\n}\r\n\r\nexport class Marker {\r\n  constructor(public map: Microsoft.Maps.Map, private pushpin: Microsoft.Maps.Pushpin){}\r\n  setPosition(latLng: LatLngLiteral): void{\r\n    this.pushpin.setLocation(new Microsoft.Maps.Location(latLng.lat, latLng.lng));\r\n  }\r\n  deleteMarker() {\r\n    this.pushpin.setOptions({ visible: false });\r\n  }\r\n  setTitle(title: string): void{\r\n    console.log('set title');\r\n    this.pushpin.setOptions({text: title});\r\n  }\r\n  setLabel(label: string): void{\r\n    // title does not exist on the TSD.\r\n    this.pushpin.setOptions(<any> {title: label});\r\n  }\r\n  setDraggable(draggable: boolean): void{\r\n    this.pushpin.setOptions({draggable: draggable});\r\n  }\r\n  setIcon(icon: string): void{\r\n    this.pushpin.setOptions({icon: icon});\r\n  }\r\n  getLabel(): string{\r\n    return null;\r\n  }\r\n  addListener(eventType: string, fn: Function): void{\r\n    Microsoft.Maps.Events.addHandler(this.pushpin, eventType, (e) => {\r\n      fn(e);\r\n    });\r\n  }\r\n}\r\n\r\nexport interface MarkerOptions {\r\n  position: LatLngLiteral;\r\n  title?: string;\r\n  label?: string;\r\n  draggable?: boolean;\r\n  icon?: string;\r\n}\r\n\r\nexport interface LatLngLiteral {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface MouseEvent { latLng: LatLng; }\r\n\r\nexport enum MapTypeId {\r\n    aerial,\r\n    auto,\r\n    birdseye,\r\n    collinsBart,\r\n    mercator,\r\n    ordnanceSurvey,\r\n    road\r\n}\r\nexport interface MapOptions {\r\n  center?: LatLngLiteral;\r\n  zoom?: number;\r\n  mapTypeId?: MapTypeId;\r\n}\r\n\r\nexport class InfoWindow {\r\n  constructor(private map: Microsoft.Maps.Map, private infoBox: Microsoft.Maps.Infobox) {}\r\n  close(): void {\r\n    (<any> this.infoBox).setMap(null);\r\n    this.infoBox.setOptions({visible: false});\r\n  };\r\n  getPosition(): LatLngLiteral{\r\n    return  {\r\n      lat: this.infoBox.getLocation().latitude,\r\n      lng: this.infoBox.getLocation().longitude\r\n    };\r\n  };\r\n\r\n  open(): void{\r\n    // when using custom HTML, you have to do setMap.\r\n    (<any> this.infoBox).setMap(this.map);\r\n    this.infoBox.setOptions({visible: true});\r\n  };\r\n  setOptions(options: InfoWindowOptions): void{\r\n    this.infoBox.setOptions({\r\n      title: options.title,\r\n      description: options.title\r\n    });\r\n  };\r\n  setPosition(position: LatLngLiteral): void{\r\n    this.infoBox.setLocation(new Microsoft.Maps.Location(position.lat, position.lng));\r\n  };\r\n}\r\n\r\nexport interface MVCObject { constructor(): void; }\r\n\r\nexport interface Size {\r\n  height: number;\r\n  width: number;\r\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\r\n  equals(other: Size): boolean;\r\n  toString(): string;\r\n}\r\n\r\nexport interface InfoWindowOptions {\r\n  title?: string;\r\n  description?: string;\r\n  disableAutoPan?: boolean;\r\n  maxWidth?: number;\r\n  pixelOffset?: Size;\r\n  position?: LatLngLiteral;\r\n  zIndex?: number;\r\n  actions?: InfoWindowAction[];\r\n}\r\n\r\nexport interface InfoWindowAction {\r\n  label: string;\r\n  eventHandler: (args?: any) => void;\r\n}\r\n"],"sourceRoot":"/source/"}