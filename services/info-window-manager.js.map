{"version":3,"sources":["services/info-window-manager.ts"],"names":[],"mappings":"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","file":"services/info-window-manager.js","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\r\nimport {BingMapInfoWindow} from '../directives/bing-map-info-window';\r\nimport {BingMapsAPIWrapper} from './bing-maps-api-wrapper';\r\nimport {InfoWindow, InfoWindowOptions} from './bing-maps-types';\r\n\r\n@Injectable()\r\nexport class InfoWindowManager {\r\n  private _infoWindows: Map<BingMapInfoWindow, Promise<InfoWindow>> =\r\n      new Map<BingMapInfoWindow, Promise<InfoWindow>>();\r\n\r\n  constructor(private _mapsWrapper: BingMapsAPIWrapper, private _zone: NgZone) {}\r\n\r\n  deleteInfoWindow(infoWindow: BingMapInfoWindow): Promise<void> {\r\n    const iWindow = this._infoWindows.get(infoWindow);\r\n    if (iWindow == null) {\r\n      // info window already deleted\r\n      return Promise.resolve();\r\n    }\r\n    return iWindow.then((i: InfoWindow) => {\r\n      return this._zone.run(() => {\r\n        i.close();\r\n        this._infoWindows.delete(infoWindow);\r\n      });\r\n    });\r\n  }\r\n\r\n  setPosition(infoWindow: BingMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setPosition({\r\n      lat: infoWindow.latitude,\r\n      lng: infoWindow.longitude\r\n    }));\r\n  }\r\n\r\n  open(infoWindow: BingMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((w) => {\r\n      w.open();\r\n    });\r\n  }\r\n\r\n  close(infoWindow: BingMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\r\n  }\r\n\r\n  setOptions(infoWindow: BingMapInfoWindow, options: InfoWindowOptions) {\r\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setOptions(options));\r\n  }\r\n\r\n  addInfoWindow(infoWindow: BingMapInfoWindow) {\r\n    const options: InfoWindowOptions = {\r\n      title: infoWindow.title,\r\n      description: infoWindow.description\r\n    };\r\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\r\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\r\n    }\r\n\r\n    if (typeof infoWindow.infoWindowActions !== 'undefined' && infoWindow.infoWindowActions.length > 0) {\r\n      options.actions = [];\r\n      infoWindow.infoWindowActions.forEach((infoWindowAction) => {\r\n        options.actions.push({\r\n          label: infoWindowAction.label,\r\n          eventHandler: () => { infoWindowAction.actionClicked.emit(null); }\r\n        });\r\n      });\r\n    }\r\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\r\n    this._infoWindows.set(infoWindow, infoWindowPromise);\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}