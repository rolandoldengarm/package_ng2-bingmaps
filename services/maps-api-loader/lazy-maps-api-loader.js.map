{"version":3,"sources":["services/maps-api-loader/lazy-maps-api-loader.ts"],"names":[],"mappings":"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","file":"services/maps-api-loader/lazy-maps-api-loader.js","sourcesContent":["import {Injectable, Optional} from '@angular/core';\r\nimport {MapsAPILoader} from './maps-api-loader';\r\n\r\nexport enum ScriptProtocol {\r\n  HTTP,\r\n  HTTPS,\r\n  AUTO\r\n}\r\n\r\nexport class LazyMapsAPILoaderConfig {\r\n  /**\r\n   * The Bing Maps API Key (see:\r\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\r\n   */\r\n  apiKey: string = null;\r\n\r\n  /**\r\n   * The Google Maps client ID (for premium plans).\r\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\r\n   * your application with either an API key or a client ID.\r\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\r\n   */\r\n  clientId: string = null;\r\n\r\n  /**\r\n   * The Google Maps channel name (for premium plans).\r\n   * A channel parameter is an optional parameter that allows you to track usage under your client\r\n   * ID by assigning a distinct channel to each of your applications.\r\n   */\r\n  channel: string = null;\r\n\r\n  /**\r\n   * Google Maps API version.\r\n   */\r\n  apiVersion: string = '3';\r\n\r\n  /**\r\n   * Host and Path used for the `<script>` tag.\r\n   */\r\n  hostAndPath: string = 'www.bing.com/api/maps/mapcontrol';\r\n\r\n  /**\r\n   * Protocol used for the `<script>` tag.\r\n   */\r\n  protocol: ScriptProtocol = ScriptProtocol.HTTPS;\r\n\r\n  /**\r\n   * Defines which Google Maps libraries should get loaded.\r\n   */\r\n  libraries: string[] = [];\r\n\r\n  /**\r\n   * The default bias for the map behavior is US.\r\n   * If you wish to alter your application to serve different map tiles or bias the\r\n   * application, you can overwrite the default behavior (US) by defining a `region`.\r\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\r\n   */\r\n  region: string = null;\r\n\r\n  /**\r\n   * The Google Maps API uses the browser's preferred language when displaying\r\n   * textual information. If you wish to overwrite this behavior and force the API\r\n   * to use a given language, you can use this setting.\r\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\r\n   */\r\n  language: string = null;\r\n}\r\n\r\nconst DEFAULT_CONFIGURATION = new LazyMapsAPILoaderConfig();\r\n\r\n@Injectable()\r\nexport class LazyMapsAPILoader extends MapsAPILoader {\r\n  private _scriptLoadingPromise: Promise<void>;\r\n\r\n  constructor(@Optional() private _config: LazyMapsAPILoaderConfig) {\r\n    super();\r\n    if (this._config === null || this._config === undefined) {\r\n      this._config = DEFAULT_CONFIGURATION;\r\n    }\r\n  }\r\n\r\n  load(): Promise<void> {\r\n    if (this._scriptLoadingPromise) {\r\n      return this._scriptLoadingPromise;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.async = true;\r\n    script.defer = true;\r\n    const callbackName: string = `angular2bingmaps${new Date().getMilliseconds() }`;\r\n    script.src = this._getScriptSrc(callbackName);\r\n\r\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\r\n      (<any>window)[callbackName] = () => { resolve(); };\r\n\r\n      script.onerror = (error: Event) => { reject(error); };\r\n    });\r\n\r\n    document.body.appendChild(script);\r\n    return this._scriptLoadingPromise;\r\n  }\r\n\r\n  private _getScriptSrc(callbackName: string): string {\r\n    let protocolType: ScriptProtocol =\r\n        (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\r\n    let protocol: string;\r\n\r\n    switch (protocolType) {\r\n      case ScriptProtocol.AUTO:\r\n        protocol = '';\r\n        break;\r\n      case ScriptProtocol.HTTP:\r\n        protocol = 'http:';\r\n        break;\r\n      case ScriptProtocol.HTTPS:\r\n        protocol = 'https:';\r\n        break;\r\n    }\r\n\r\n    const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\r\n    // const apiKey: string = this._config.apiKey || DEFAULT_CONFIGURATION.apiKey;\r\n    // const clientId: string = this._config.clientId || DEFAULT_CONFIGURATION.clientId;\r\n    // const channel: string = this._config.channel || DEFAULT_CONFIGURATION.channel;\r\n    // const libraries: string[] = this._config.libraries || DEFAULT_CONFIGURATION.libraries;\r\n    // const region: string = this._config.region || DEFAULT_CONFIGURATION.region;\r\n    // const language: string = this._config.language || DEFAULT_CONFIGURATION.language;\r\n    const queryParams: {[key: string]: string} = {\r\n      callback: callbackName\r\n    };\r\n    // if (apiKey) {\r\n    //   queryParams['key'] = apiKey;\r\n    // }\r\n    // if (clientId) {\r\n    //   queryParams['client'] = clientId;\r\n    // }\r\n    // if (channel) {\r\n    //   queryParams['channel'] = channel;\r\n    // }\r\n    // if (libraries != null && libraries.length > 0) {\r\n    //   queryParams['libraries'] = libraries.join(',');\r\n    // }\r\n    // if (region != null && region.length > 0) {\r\n    //   queryParams['region'] = region;\r\n    // }\r\n    // if (language != null && language.length > 0) {\r\n    //   queryParams['language'] = language;\r\n    // }\r\n    const params: string = Object.keys(queryParams)\r\n                               .map((k: string, i: number) => {\r\n                                 let param = (i === 0) ? '?' : '&';\r\n                                 return param += `${k}=${queryParams[k]}`;\r\n                               })\r\n                               .join('');\r\n    return `${protocol}//${hostAndPath}${params}`;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}