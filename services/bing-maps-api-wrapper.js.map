{"version":3,"sources":["services/bing-maps-api-wrapper.ts"],"names":[],"mappings":"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","file":"services/bing-maps-api-wrapper.js","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\r\nimport {Observer} from 'rxjs/Observer';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {MapsAPILoader} from './maps-api-loader/maps-api-loader';\r\nimport * as mapTypes from './bing-maps-types';\r\nimport {LazyMapsAPILoaderConfig} from './maps-api-loader/lazy-maps-api-loader';\r\n\r\n/**\r\n * Wrapper class that handles the communication with the Bing Maps Javascript\r\n * API v8\r\n */\r\n@Injectable()\r\nexport class BingMapsAPIWrapper {\r\n  private _map: Promise<Microsoft.Maps.Map>;\r\n  private _mapResolver: (value?: Microsoft.Maps.Map) => void;\r\n\r\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone, private _config: LazyMapsAPILoaderConfig) {\r\n    this._map =\r\n        new Promise<Microsoft.Maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\r\n  }\r\n\r\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\r\n    return this._loader.load().then(() => {\r\n      // todo other options\r\n      let map = new Microsoft.Maps.Map(el, {\r\n        credentials: this._config.apiKey,\r\n        center: new Microsoft.Maps.Location(mapOptions.center.lat, mapOptions.center.lng),\r\n        zoom: mapOptions.zoom,\r\n        mapTypeId: mapOptions.mapTypeId\r\n      });\r\n      this._mapResolver(map);\r\n      return;\r\n    });\r\n  }\r\n\r\n  setMapOptions(options: mapTypes.MapOptions) {\r\n    this._map.then((m: Microsoft.Maps.Map) => {\r\n      m.setOptions({\r\n        center: new Microsoft.Maps.Location(options.center.lat, options.center.lng),\r\n        zoom: options.zoom,\r\n        mapTypeId: options.mapTypeId\r\n      });\r\n      // todo other options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a Bing map marker with the map context\r\n   */\r\n  createMarker(options: mapTypes.MarkerOptions = <mapTypes.MarkerOptions>{}):\r\n      Promise<mapTypes.Marker> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => {\r\n      var loc = new Microsoft.Maps.Location(options.position.lat, options.position.lng);\r\n      var pushpin = new Microsoft.Maps.Pushpin(loc);\r\n      map.entities.push(pushpin);\r\n      return new mapTypes.Marker(map, pushpin);\r\n    });\r\n  }\r\n\r\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => {\r\n      var infoBox = new Microsoft.Maps.Infobox(\r\n        new Microsoft.Maps.Location(options.position.lat, options.position.lng),\r\n        {\r\n          visible: false,\r\n          title: options.title,\r\n          description: options.description,\r\n          actions: options.actions\r\n        });\r\n      map.entities.push(infoBox);\r\n      return new mapTypes.InfoWindow(map, infoBox);\r\n    });\r\n  }\r\n\r\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\r\n    return Observable.create((observer: Observer<E>) => {\r\n      this._map.then((m: Microsoft.Maps.Map) => {\r\n        Microsoft.Maps.Events.addHandler(m, eventName, (e: any) => {\r\n          this._zone.run(() => observer.next(e));\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => map.setOptions(\r\n        { center: new Microsoft.Maps.Location(latLng.lat, latLng.lng) }\r\n      ));\r\n  }\r\n\r\n  getZoom(): Promise<number> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => map.getZoom());\r\n  }\r\n\r\n  setZoom(zoom: number): Promise<void> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => map.setOptions({zoom: zoom}));\r\n  }\r\n\r\n  getCenter(): Promise<mapTypes.LatLngLiteral> {\r\n    return this._map.then((map: Microsoft.Maps.Map) => {\r\n      let center = map.getCenter();\r\n      return {\r\n        lat: center.latitude,\r\n        lng: center.longitude\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggers the given event name on the map instance.\r\n   */\r\n  triggerMapEvent(eventName: string): Promise<void> {\r\n    return this._map.then((m) => Microsoft.Maps.Events.invoke(m, eventName, null));\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}