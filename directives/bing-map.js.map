{"version":3,"sources":["directives/bing-map.ts"],"names":[],"mappings":"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","file":"directives/bing-map.js","sourcesContent":["import {Component, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChange} from '@angular/core';\r\nimport {BingMapsAPIWrapper} from '../services/bing-maps-api-wrapper';\r\nimport {MarkerManager} from '../services/marker-manager';\r\nimport {InfoWindowManager} from '../services/info-window-manager';\r\nimport {LatLngLiteral} from '../services/bing-maps-types';\r\n\r\n/**\r\n * BingMap renders a Bing Map.\r\n * **Important note**: To be able see a map in the browser, you have to define a height for the CSS\r\n * class `bing-map-container`.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import {Component} from '@angular/core';\r\n * import {BingMap} from 'ng2-bingmaps/directives';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  directives: [BingMap],\r\n *  styles: [`\r\n *    .bing-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *    </sebm-google-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'bing-map',\r\n  providers: [BingMapsAPIWrapper, MarkerManager, InfoWindowManager],\r\n  inputs: [\r\n    'longitude', 'latitude', 'zoom', 'disableDoubleClickZoom', 'disableDefaultUI', 'scrollwheel',\r\n    'backgroundColor', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'zoomControl'\r\n  ],\r\n  outputs: ['mapClick', 'mapRightClick', 'mapDblClick', 'centerChange'],\r\n  host: {'[class.bing-map-container]': 'true'},\r\n  styles: [`\r\n    .bing-map-container-inner {\r\n      width: inherit;\r\n      height: inherit;\r\n    }\r\n    .bing-map-content {\r\n      display:none;\r\n    }\r\n  `],\r\n  template: `\r\n    <div class='bing-map-container-inner'></div>\r\n    <div class='bing-map-content'>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n})\r\nexport class BingMap implements OnChanges,\r\n    OnInit {\r\n  private _longitude: number = 0;\r\n  private _latitude: number = 0;\r\n  private _zoom: number = 8;\r\n  /**\r\n   * Enables/disables zoom and center on double click. Enabled by default.\r\n   */\r\n  disableDoubleClickZoom: boolean = false;\r\n\r\n  /**\r\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\r\n   */\r\n  scrollwheel: boolean = true;\r\n\r\n  /**\r\n   * Color used for the background of the Map div. This color will be visible when tiles have not\r\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\r\n   */\r\n  backgroundColor: string;\r\n\r\n  /**\r\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\r\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\r\n   * least one fallback cursor that is not a URL. For example:\r\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n   */\r\n  draggableCursor: string;\r\n\r\n  /**\r\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\r\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\r\n   * one fallback cursor that is not a URL. For example:\r\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n   */\r\n  draggingCursor: string;\r\n\r\n  /**\r\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\r\n   * enabled by default.\r\n   */\r\n  keyboardShortcuts: boolean = true;\r\n\r\n  /**\r\n   * The enabled/disabled state of the Zoom control.\r\n   */\r\n  zoomControl: boolean = true;\r\n\r\n  /**\r\n   * Map option attributes that can change over time\r\n   */\r\n  private static _mapOptionsAttributes: string[] = [\r\n    'disableDoubleClickZoom', 'scrollwheel', 'draggableCursor', 'draggingCursor',\r\n    'keyboardShortcuts', 'zoomControl'\r\n  ];\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n   * marker or infoWindow).\r\n   */\r\n  mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n   * on a marker or infoWindow).\r\n   */\r\n  mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n   * on a marker or infoWindow).\r\n   */\r\n  mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter is fired when the map center changes.\r\n   */\r\n  centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\r\n\r\n  constructor(private _elem: ElementRef, private _mapsWrapper: BingMapsAPIWrapper) {}\r\n\r\n  /** @internal */\r\n  ngOnInit() {\r\n    const container = this._elem.nativeElement.querySelector('.bing-map-container-inner');\r\n    this._initMapInstance(container);\r\n  }\r\n\r\n  private _initMapInstance(el: HTMLElement) {\r\n    this._mapsWrapper.createMap(el, {\r\n      center: {lat: this._latitude, lng: this._longitude},\r\n      zoom: this._zoom\r\n    });\r\n    this._handleMapCenterChange();\r\n    this._handleMapZoomChange();\r\n  }\r\n\r\n  /* @internal */\r\n  ngOnChanges(changes: {[propName: string]: SimpleChange}) {\r\n    this._updateMapOptionsChanges(changes);\r\n  }\r\n\r\n  private _updateMapOptionsChanges(changes: {[propName: string]: SimpleChange}) {\r\n    let options: {[propName: string]: any} = {};\r\n    let optionKeys =\r\n        Object.keys(changes).filter(k => BingMap._mapOptionsAttributes.indexOf(k) !== -1);\r\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n    // todo this._mapsWrapper.setMapOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Triggers a resize event on the google map instance.\r\n   * Returns a promise that gets resolved after the event was triggered.\r\n   */\r\n  triggerResize(): Promise<void> {\r\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\r\n    // common case for triggering a resize event), then the resize event would not\r\n    // work (to show the map), so we trigger the event in a timeout.\r\n    return new Promise<void>((resolve) => {\r\n      setTimeout(\r\n          () => { return this._mapsWrapper.triggerMapEvent('resize').then(() => resolve()); });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the zoom level of the map. The default value is `8`.\r\n   */\r\n  set zoom(value: number|string) {\r\n    this._zoom = this._convertToDecimal(value, 8);\r\n    if (typeof this._zoom === 'number') {\r\n      this._mapsWrapper.setZoom(this._zoom);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The longitude that sets the center of the map.\r\n   */\r\n  set longitude(value: number|string) {\r\n    this._longitude = this._convertToDecimal(value);\r\n    this._updateCenter();\r\n  }\r\n\r\n  /**\r\n   * The latitude that sets the center of the map.\r\n   */\r\n  set latitude(value: number|string) {\r\n    this._latitude = this._convertToDecimal(value);\r\n    this._updateCenter();\r\n  }\r\n\r\n  private _convertToDecimal(value: string|number, defaultValue: number = null): number {\r\n    if (typeof value === 'string') {\r\n      return parseFloat(value);\r\n    } else if (typeof value === 'number') {\r\n      return <number>value;\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  private _updateCenter() {\r\n    if (typeof this._latitude !== 'number' || typeof this._longitude !== 'number') {\r\n      return;\r\n    }\r\n    this._mapsWrapper.setCenter({\r\n      lat: this._latitude,\r\n      lng: this._longitude,\r\n    });\r\n  }\r\n\r\n  private _handleMapCenterChange() {\r\n    this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\r\n      this._mapsWrapper.getCenter().then((center: LatLngLiteral) => {\r\n        this._latitude = center.lat;\r\n        this._longitude = center.lng;\r\n        this.centerChange.emit(<LatLngLiteral>{lat: this._latitude, lng: this._longitude});\r\n      });\r\n    });\r\n  }\r\n\r\n  private _handleMapZoomChange() {\r\n    this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\r\n      this._mapsWrapper.getZoom().then((z: number) => this._zoom = z);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}